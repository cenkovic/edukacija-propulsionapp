<div class="container">
    <div class="row">
        <div class="span12">
<h2>Forms</h2>
<div class="padded">
      Zend forme takođe mogu da se kreiraju iz komandne linije ili ručno.
</div><br/>
 <pre class="prettyprint">
     % zf create form Guestbook
     Creating a form at application/forms/Guestbook.php
      Updating project profile '.zfproject.xml'
 </pre>
<div class="padded">
     Ova komanda kreira folder forms u folderu application, i dodaje klasu Application_Form_Guestbook, koja nasleđuje klasu Zend_Form.
</div><br/>
 <pre class="prettyprint">
class Application_Form_Guestbook extends Zend_Form
{
    public function init()
    {
        // Podešavanje metode za submitovanje forme, u ovom slučaju metod POST
        $this->setMethod('post');

        // Tekstualno polje
        $this->addElement('text', 'email', array(
            'label'      => 'Your email address:',
            'required'   => true,
            'filters'    => array('StringTrim'),
            'validators' => array(
                'EmailAddress',
            )
        ));

        // Textarea polje
        $this->addElement('textarea', 'comment', array(
            'label'      => 'Please Comment:',
            'required'   => true,
            'validators' => array(
                array('validator' => 'StringLength', 'options' => array(0, 20))
                )
        ));

        // Captcha
        $this->addElement('captcha', 'captcha', array(
            'label'      => 'Please enter the 5 letters displayed below:',
            'required'   => true,
            'captcha'    => array(
                'captcha' => 'Figlet',
                'wordLen' => 5,
                'timeout' => 300
            )
        ));

        // Submit dugme
        $this->addElement('submit', 'submit', array(
            'ignore'   => true,
            'label'    => 'Sign Guestbook',
        ));

    }
}
   </pre>
<div class="padded">
     Od elemenata možemo da dodamo radio button, password, checkbox, selectbox, file i mnoge druge koji su predefinisani u zendu.
</div><br/>
Takođe možemo da kreiramo svoj custom element, custom validator ili filter.

<h2>Custom Validatori</h2>
<pre class="prettyprint">
class My_UniqueEmail extends Zend_Validate_Abstract
{
    const EMAIL_EXISTS='';
    protected $_messageTemplates = array(
        self::EMAIL_EXISTS=>'Email "%value%" exists'
    );
    public function __construct(Application_Model_DbTable_Users $model)
    {
        $this->_model = $model;
    }
    public function isValid($value, $context=null)
    {
        $this->_setValue($value);

        $exist = $this->_model->checkExist($value);
        if(isset($exist) && $exist != null)
            $error = true;
        else
            $error = false;

        if (!$error)
            return true;

        $this->_error(self::EMAIL_EXISTS);
        return false;
    }
}
</pre>
<div class="padded">
    Da bi mogli da koristimo custom validator koji smo napisali potrebno je da dodamo sledeći kod u našu formu:
</div><br/>
<pre class="prettyprint">
 $this->addElementPrefixPath(
                'My',
                APPLICATION_PATH.'/forms/validate/',
                'validate'
        );

 $this->addElement('text', 'email', array(
            'label'      => 'Your email address:',
            'required'   => true,
            'filters'    => array('StringTrim'),
            'validators' => array(
                'EmailAddress'

            )
        ));
//Na kreiranom elementu dodajemo naš custom validator i prosleđujemo mu model na osnovu koga proverava da li je mail jedinstven
        $this->getElement('email')->addValidator('UniqueEmail',false, array(new Application_Model_DbTable_Users()));
</pre>

<h2>Custom Filteri</h2>
<pre class="prettyprint">
class My_FirstThree implements Zend_Filter_Interface
{

    public function filter($value)
    {

       $firstThree = substr($value, 0, 3);
       $valueFiltered = $firstThree;

        return $valueFiltered;
    }
}
</pre>
<div class="padded">
    Da bi mogli da koristimo custom filter koji smo kreirali potrebno je da dodamo sledeći kod u našu formu:
</div><br/>
<pre class="prettyprint">
 $this->addElementPrefixPath(
                'My',
                APPLICATION_PATH.'/forms/filter/',
                'filter'
        );

 $this->addElement('textarea', 'comment', array(
            'label'      => 'Please Comment:',
            'required'   => true,
            'rows' => 3,
            'validators' => array(
                array('validator' => 'StringLength', 'options' => array(0, 20))
                )
        ));
//Na kreiranom elementu dodajemo naš custom filter, koji uzima prve tri cifre od unete vrednosti i dodaje '_000'
         $this->getElement('comment')->addFilter('FirstThree',false, array());

       
</pre>
<h2>Custom Element</h2>
<pre class="prettyprint">
class My_Form_Element_Date extends Zend_Form_Element_Xhtml
{
    protected $_dateFormat = '%year%-%month%-%day%';
    protected $_day;
    protected $_month;
    protected $_year;

    public function __construct($spec, $options = null)
    {
        $this->addPrefixPath(
            'My_Form_Decorator',
            'My/Form/Decorator',
            'decorator'
        );
        parent::__construct($spec, $options);
    }

    public function loadDefaultDecorators()
    {
        if ($this->loadDefaultDecoratorsIsDisabled()) {
            return;
        }

        $decorators = $this->getDecorators();
        if (empty($decorators)) {
            $this->addDecorator('Date')
                 ->addDecorator('Errors')
                 ->addDecorator('Description', array(
                     'tag'   => 'p',
                     'class' => 'description'
                 ))
                 ->addDecorator('HtmlTag', array(
                     'tag' => 'dd',
                     'id'  => $this->getName() . '-element'
                 ))
                 ->addDecorator('Label', array('tag' => 'dt'));
        }
    }

    public function setDay($value)
    {
        $this->_day = (int) $value;
        return $this;
    }

    public function getDay()
    {
        return $this->_day;
    }

    public function setMonth($value)
    {
        $this->_month = (int) $value;
        return $this;
    }

    public function getMonth()
    {
        return $this->_month;
    }

    public function setYear($value)
    {
        $this->_year = (int) $value;
        return $this;
    }

    public function getYear()
    {
        return $this->_year;
    }

    public function setValue($value)
    {
        if (is_int($value)) {
            $this->setDay(date('d', $value))
                 ->setMonth(date('m', $value))
                 ->setYear(date('Y', $value));
        } elseif (is_string($value)) {
            $date = strtotime($value);
            $this->setDay(date('d', $date))
                 ->setMonth(date('m', $date))
                 ->setYear(date('Y', $date));
        } elseif (is_array($value)
                  && (isset($value['day'])
                      && isset($value['month'])
                      && isset($value['year'])
                  )
        ) {
            $this->setDay($value['day'])
                 ->setMonth($value['month'])
                 ->setYear($value['year']);
        } else {
            throw new Exception('Invalid date value provided');
        }

        return $this;
    }

    public function getValue()
    {
        return str_replace(
            array('%year%', '%month%', '%day%'),
            array($this->getYear(), $this->getMonth(), $this->getDay()),
            $this->_dateFormat
        );
    }
</pre>

<h2>Custom Decorator</h2>
<pre class="prettyprint">
    public function render($content)
    {
        $element = $this->getElement();
        if (!$element instanceof My_Form_Element_Date) {
            // only want to render Date elements
            return $content;
        }

        $view = $element->getView();
        if (!$view instanceof Zend_View_Interface) {
            // using view helpers, so do nothing if no view present
            return $content;
        }

        $day   = $element->getDay();
        $month = $element->getMonth();
        $year  = $element->getYear();
        $name  = $element->getFullyQualifiedName();

        $params = array(
            'size'      => 2,
            'maxlength' => 2,
        );
        $yearParams = array(
            'size'      => 4,
            'maxlength' => 4,
        );

        $markup = $view->formText($name . '[day]', $day, $params)
                . ' / ' . $view->formText($name . '[month]', $month, $params)
                . ' / ' . $view->formText($name . '[year]', $year, $yearParams);

        switch ($this->getPlacement()) {
            case self::PREPEND:
                return $markup . $this->getSeparator() . $content;
            case self::APPEND:
            default:
                return $content . $this->getSeparator() . $markup;
        }
    }
}
</pre>
<div class="padded">
    Nakon kreiranja custom elementa i custom decoratora u formi na sledeći način dodajemo custom element:
</div>
<pre class="prettyprint">
    $date = new My_Form_Element_Date('dateOfBirth');
    $date->setLabel('Date of Birth: ')->setView(new Zend_View());
    $date->setValue(array('year' => '2009', 'month' => '04', 'day' => '20'));
    $this->addElement($date);
</pre>
<a href="<?php echo $this->url(array('controller' => 'index', 'action' => 'test')); ?>" class="btn">Test forme</a>
        </div>
    </div>
</div>